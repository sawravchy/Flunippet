{

  "Flutter demo app snippet": {
    "prefix": "fdemo",
    "body": [
      "import 'package:flutter/material.dart';",
      "",

      "void main() => runApp(MyApp());",
      "",
      "class MyApp extends StatelessWidget {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      title: 'Flutter Demo',",
      "      debugShowCheckedModeBanner: false,",
      "      theme: ThemeData(",
      "        primarySwatch: Colors.blue,",
      "      ),",
      "      home: MyHomePage(title: 'Flutter Demo Home Page'),",
      "    );",
      "  }",
      "}",

      "class MyHomePage extends StatefulWidget {",
      "  MyHomePage({Key key, this.title}) : super(key: key);",

      "  final String title;",

      "  @override",
      "  _MyHomePageState createState() => _MyHomePageState();",
      "}",

      "class _MyHomePageState extends State<MyHomePage> {",
      "  int _counter = 0;",

      "  void _incrementCounter() {",
      "    setState(() {",
      "      _counter++;",
      "    });",
      "  }",

      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Scaffold(",
      "      appBar: AppBar(",
      "        title: Text(widget.title),",
      "      ),",
      "      body: Center(",
      "        child: Column(",
      "          mainAxisAlignment: MainAxisAlignment.center,",
      "          children: <Widget>[",
      "            Text(",
      "              'You have pushed the button this many times:',",
      "            ),",
      "            Text(",
      "              '$_counter',",
      "              style: Theme.of(context).textTheme.headline4,,",
      "            ),",
      "          ],",
      "        ),",
      "      ),",
      "      floatingActionButton: FloatingActionButton(",
      "        onPressed: _incrementCounter,",
      "        tooltip: 'Increment',",
      "        child: Icon(Icons.add),",
      "      ),",
      "    );",
      "  }",
      "}"

    ],
    "description": "Flutter demo app snippet"
  },
  
  "Flutter Scaffold widget snippet": {
    "prefix": "fsca",
    "body": [
      "Scaffold(",
      "  appBar: AppBar(",
      "    title: Text('${1:Title}'),",
      "  ),",
      "  body: ${2:Container()}${0},",
      ");"
    ],
    "description": "Flutter Scaffold widget snippet"
  },

  "Flutter Stateless widget snippet": {
    "prefix": "fstless",
    "body": [
      "class MyApp extends StatelessWidget {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Container();",
      "  }",
      "}"
    ],
    "description": "Flutter Stateless widget snippet"
  },

  "Flutter Statefull widget snippet": {
    "prefix": "fstfull",
    "body": [
      "class Myapp extends StatefulWidget {",
      "@override",
      "_MyappState createState() => _MyappState();",
      "}",

      "class _MyappState extends State<Myapp> {",
      " @override",
      " Widget build(BuildContext context) {",
      "   return Container(",
      "   );",
      " }",
      "}"
    ],
    "description": "Flutter Statefull widget snippet"
  },

  "Flutter EdgeInsets widget snippet with named constructor `all`": {
    "prefix": "fedgall",
    "body": ["EdgeInsets.all(${1:32.0})${0}"],
    "description": "Flutter EdgeInsets widget snippet with named constructor `all`"
  },

  "Text widget snippet": {
    "prefix": "ftxt",
    "body": ["Text('${1:text}')${0}"],
    "description": "Flutter Text widget snippet"
  },
  
  "Flutter Icon widget snippet": {
    "prefix": "fic",
    "body": ["Icon(Icons.${1:clear})${0}"],
    "description": "Flutter Icon widget snippet"
  },

  "Flutter Container widget snippet": {
    "prefix": "fcont",
    "body": ["Container(", "  child: ${1:Widget}(${0}),", ")"],
    "description": "Flutter Container widget snippet"
  },

  "Flutter Center widget snippet": {
    "prefix": "fcent",
    "body": ["Center(", "  child: ${1:Widget}(${0}),", ")"],
    "description": "Flutter Center widget snippet"
  },
  
  "Flutter Row widget snippet": {
    "prefix": "frow",
    "body": ["Row(", "  children: <Widget>[${0}],", ")"],
    "description": "Flutter Row widget snippet"
  },

  "Flutter Column widget snippet": {
    "prefix": "fcol",
    "body": ["Column(", "  children: <Widget>[${0}],", ")"],
    "description": "Flutter Column widget snippet"
  },

  "Flutter SizedBox widget snippet with width & height arguments": {
    "prefix": "fsizeb",
    "body": ["SizedBox(width: ${1:0.0}, height: ${2:0.0})${0}"],
    "description": "Flutter SizedBox widget with width & height arguments"
  },

  "Flutter SizedBox widget snippet with width argument": {
    "prefix": "fsizebw",
    "body": ["SizedBox(", "  width: ${1:0.0},${0}", ")"],
    "description": "Flutter SizedBox widget snippet with width argument"
  },

  "Flutter SizedBox widget snippet with height argument": {
    "prefix": "fsizebh",
    "body": ["SizedBox(", "  height: ${1:0.0},${0}", ")"],
    "description": "Flutter SizedBox widget snippet with height argument"
  },

  "Flutter Expand widget snippet": {
    "prefix": "fex",
    "body": ["Expanded(", "  child: ${1:null},${0}", ")"],
    "description": "Flutter Expand widget snippet"
  },

  "Flutter Stack widget snippet": {
    "prefix": "fstack",
    "body": [
      "Stack(",
      "  children: <Widget>[${0}],",
      ")"
    ],
    "description": "Flutter Stack widget snippet"
  },

  "Flutter EdgeInsets widget snippet with named constructor `only`": {
    "prefix": "fedgonly",
    "body": ["EdgeInsets.only(${1})${0}"],
    "description": "Flutter EdgeInsets widget snippet with named constructor `only`"
  },

  "Flutter EdgeInsets widget snippet with symmetric contructor `symmetric`": {
    "prefix": "fedgsym",
    "body": ["EdgeInsets.symmetric(vertical: ${1:8.0}, horizontal: ${2:8.0},)${0}"],
    "description": "Flutter EdgeInsets widget snippet with named constructor `symmetric`"
  },

  "Flutter EdgeInsets widget snippet with symmetric contructor `symmetric` with only vertical parameter": {
    "prefix": "fedgsymv",
    "body": ["EdgeInsets.symmetric(vertical: ${1:8.0},)${0}"],
    "description": "Flutter EdgeInsets widget snippet with named constructor `symmetric` with only vertical parameter"
  },

  "Flutter EdgeInsets widget snippet with symmetric contructor `symmetric` with only horizontal parameter": {
    "prefix": "fedgsymh",
    "body": ["EdgeInsets.symmetric(horizontal: ${1:8.0},)${0}"],
    "description": "Flutter EdgeInsets widget snippet with named constructor `symmetric` with only horizontal parameter"
  },

  "Flutter Align widget": {
    "prefix": "falign",
    "body": [
      "Align(",
      "  alignment: Alignment${1},",
      "  child:${2:Widget}",
      "  ),"
    ],
    "description": "Flutter Align widget"
  },

  "Flutter Flatbutton widget": {
    "prefix": "fflatbtn",
    "body": [
      "FlatButton(",
      "  onPressed: () {${1}},",
      "  child: Text(",
      "    \"${2:Flat Button}\",",
      "  ),",
      "),"
    ],
    "description": "Flutter Flatbutton widget"
  },

  "Flutter FloatingActionButton widget": {
    "prefix": "facbtn",
    "body": [
      "FloatingActionButton(",
      "  onPressed: () {${1}},",
      "  child: Icon(Icons.${2:add}),",
      "),"
    ],
    "description": "Flutter FloatingActionButton widget"
  },

  "Flutter IconButton widget": {
    "prefix": "ficbtn",
    "body": [
      "IconButton(",
      "  onPressed: () {${1}},",
      "  icon: Icon(Icons.${2:add}),",
      "),"
    ],
    "description": "Flutter IconButton widget"
  },

  "Flutter RaisedButton widget": {
    "prefix": "fraisedbtn",
    "body": [
      "RaisedButton(",
      "  onPressed: () {${1}},",
      "  child: Text(",
      "    \"${2:Raised Button}\",",
      "  ),",
      ")"
    ],
    "description": "Flutter RaisedButton widget"
  },

  "Flutter GestureDetector widget": {
    "prefix": "fgesdet",
    "body": [
      "GestureDetector(",
      "  onTap: () {${1}},",
      "  child: ${2:Widget},",
      "),"
    ],
    "description": "Flutter GestureDetector widget"
  },
  
  "Flutter InkWell widget": {
    "prefix": "fink",
    "body": [
      "InkWell(",
      "  onTap: () {${1}},",
      "  child:${2:Widget}",
      "),"
    ],
    "description": "Flutter InkWell widget"
  }, 

  "Flutter Drawer widget": {
    "prefix": "fdrawer",
    "body": [
      "Drawer(",
      "  child: ListView(",
      "    children: const <Widget>[${0}],",
      "),  "
    ],
    "description": "Flutter Drawer widget"
  },

  "Flutter MediaQuery widget": {
    "prefix": "fmedque",
    "body": [
      "MediaQuery.of(context).${0};"
    ],
    "description": "Flutter MediaQuery widget"
  },

  "Flutter ListView Widget": {
    "prefix": "flistv",
    "body": [
      "ListView(",
      "children: <Widget>[${0}],",
      ")"
    ],
    "description": "Flutter ListView Widget"
  },

  "Flutter initState lifecycle method snippet": {
    "prefix": "finitlife",
    "body": ["@override", "void initState() {", "  super.initState();", "  ${0}", "}"],
    "description": "Flutter initState lifecycle method"
  },

  "Flutter StreamBuilder widget snippet": {
    "prefix": "fstream",
    "body": [
      "StreamBuilder<${1:dynamic}>(        ",
      "  stream: ${2:yourStream},",
      "  builder: (BuildContext context, AsyncSnapshot<${1:dynamic}> snapshot) {",
      "      if (snapshot.hasData) {",
      "       // TODO: do something with the data",
      "       return ${3:Container()};",
      "      } else if (snapshot.hasError) {",
      "      // TODO: do something with the error",
      "       return ${4:Text(snapshot.error.toString())};",
      "      }",
      "      // TODO: the data is not ready, show a loading indicator",
      "      return ${5:Center(child: CircularProgressIndicator())};",
      "   },",
      ")"
    ],
    "description": "Flutter StreamBuilder widget snippet"
  },



  "Dart Public Instance variable snippet": {
    "prefix": "dpubinsvar",
    "body": ["${1:dynamic} ${2:variableName}${0}"],
    "description": "Dart Instance variable snippet"
  },

  "Dart Private instance variable snippet": {
    "prefix": "dprinsvar",
    "body": ["${1:dynamic} _${2:variableName};${0}"],
    "description": "Dart Private instance variable snippet"
  },

  "Dart private method snippet": {
    "prefix": "dprmtd",
    "body": ["${1:void} _${2:methodName}(${3}) ${4}{", "  ${0}", "}"],
    "description": "Dart private method snippet"
  },

  "Dart optional named parameters constructor snippet": {
    "prefix": "dopnctor",
    "body": ["${1:constructorName}({${2}});${0}"],
    "description": "Dart optional named parameters constructor snippet"
  },
 
  "Dart `List` collection snippet": {
    "prefix": "dlist",
    "body": ["List<${1:dynamic}> ${2:listName}${0}"],
    "description": "Dart `List` collection snippet"
  },

  "Dart `Map` collection snippet": {
    "prefix": "dmap",
    "body": ["Map<${1:dynamic}, ${2:dynamic}> ${3:mapName}${0}"],
    "description": "Dart `Map` collection snippet"
  },

  "Dart `Set` collection snippet": {
    "prefix": "dset",
    "body": ["Set<${1:dynamic}> ${2:setName}${0}"],
    "description": "Dart `Set` collection snippet"
  },

  "Dart arrow function getter snippet": {
    "prefix": "darrget",
    "body": ["${1:dynamic} get ${2:name} => ${3:returnValue};${0}"],
    "description": "Dart arrow function getter snippet"
  },

  "Dart `import as` snippet": {
    "prefix": "dimpas",
    "body": ["import '${1:packageName}' as ${2:alias}${0};"],
    "description": "Dart `import as` snippet"
  },

  "Dart `import show` snippet": {
    "prefix": "dimpshow",
    "body": ["import '${1:packageName}' show ${2:member}${0};"],
    "description": "Dart `import show` snippet"
  },

  "Dart `import deffered as` snippet": {
    "prefix": "dimpdef",
    "body": ["import '${1:packageName}' deferred as ${2:alias}${0};"],
    "description": "Dart `import deffered as` snippet"
  },

  "Dart `import hide` snippet": {
    "prefix": "dimphide",
    "body": ["import '${1:packageName}' hide ${2:excludedMember}${0};"],
    "description": "Dart `import hide` snippet"
  },


  "Dart `export hide` snippet": {
    "prefix": "dexhide",
    "body": ["export '${1:file}' hide ${2:excludedMember}${0};"],
    "description": "Dart `export hide` snippet"
  },

  "Dart `export show` snippet": {
    "prefix": "dexshow",
    "body": ["export '${1:file}' show ${2:member}${0};"],
    "description": "Dart `export show` snippet"
  },

  "Dart public method snippet": {
    "prefix": "dpubmtd",
    "body": ["${1:void} ${2:methodName}(${3}) ${4}{", "  ${0}", "}"],
    "description": "Dart public method snippet"
  },

  "Dart `convert` lib import snippet": {
    "prefix": "dconvert",
    "body": ["import 'dart:convert'${0};"],
    "description": "Dart `convert` lib import snippet"
  },

  "Dart `var` variable declaration snippet": {
    "prefix": "dvar",
    "body": ["var ${1:variableName}${0};"],
    "description": "Dart `var` variable declaration snippet"
  },

  "Dart `final` variable declaration snippet": {
    "prefix": "dfinalvar",
    "body": ["final ${1:type} ${2:variableName} ${3:= }${0};"],
    "description": "Dart `final` variable declaration snippet"
  },

  "Dart `const` variable declaration snippet": {
    "prefix": "dconstvar",
    "body": ["const ${1:type} ${2:variableName} ${3:= }${0};"],
    "description": "Dart `const` variable declaration snippet"
  },

  "Dart public arrow function snippet": {
    "prefix": "dpubarr",
    "body": ["${1:Object} ${2:methodName}(${3}) ${4}=> ${0};"],
    "description": "Dart public arrow function snippet"
  },

  "Dart private arrow function snippet": {
    "prefix": "dprarr",
    "body": ["${1:Object} _${2:methodName}(${3}) ${4}=> ${0};"],
    "description": "Dart private arrow function snippet"
  },



  "Add material's package import statement": {
    "prefix": "impMat",
    "body": ["import 'package:flutter/material.dart';"],
    "description": "Material package import statement"
  },

  "Add Cupertino's package import statement": {
    "prefix": "impCu",
    "body": ["import 'package:flutter/cupertino.dart';"],
    "description": "Cupertino package import statement"
  },

  "Add Services package import statement": {
    "prefix": "impSer",
    "body": ["import 'package:flutter/services.dart';"],
    "description": "Services package import statement"
  },

  "Add Foundation package import statement": {
    "prefix": "impFou",
    "body": ["import 'package:flutter/foundation.dart';"],
    "description": "Foundation package import statement"
  },

  "Add HTTP package import statement": {
    "prefix": "impHttp",
    "body": ["import 'package:http/http.dart'as http;"],
    "description": "HTTP package import statement"
  },

  "Add Google Font package import statement": {
    "prefix": "impGfont",
    "body": ["import 'package:google_fonts/google_fonts.dart';"],
    "description": "Google Font package import statement"
  },

  "Add Provider package import statement": {
    "prefix": "impProv",
    "body": ["import 'package:provider/provider.dart';"],
    "description": "Provider package import statement"
  },

  "Add Path Provider package import statement": {
    "prefix": "impPath",
    "body": ["import 'package:path_provider/path_provider.dart';"],
    "description": "Path Provider package import statement"
  },

  "Add Firebase auth package import statement": {
    "prefix": "impFauth",
    "body": ["import 'package:firebase_core/firebase_core.dart';"],
    "description": "Firebase auth package import statement"
  }

}
